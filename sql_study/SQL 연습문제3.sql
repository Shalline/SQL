/*
   날짜 : 2025/07/22
   이름 : 김수진
   내용 : SQL 연습문제3
*/

-- 실습 3-2
CREATE TABLE CUSTOMER (
    C_ID      VARCHAR2(14)  PRIMARY KEY NOT NULL,               -- 고객아이디 (PK)
    C_NAME    VARCHAR2(20)  NOT NULL,               -- 고객명
    C_TYPE    NUMBER(1)     NOT NULL,               -- 고객구분 (1:개인, 2:기업)
    C_HP      VARCHAR2(14)  NOT NULL,               -- 전화번호 (UK)
    C_ADDR    VARCHAR2(100) DEFAULT NULL           -- 주소 (nullable)
);

/*    CONSTRAINT PK_CUSTOMER PRIMARY KEY (C_ID),
    CONSTRAINT UK_CUSTOMER_C_HP UNIQUE (C_HP),
    CONSTRAINT CK_CUSTOMER_C_TYPE CHECK (C_TYPE IN (1, 2))
*/

CREATE TABLE ACCOUNT (
    ACC_NO       VARCHAR2(11)   PRIMARY KEY NOT NULL,            -- 계좌번호 (PK)
    ACC_TYPE     VARCHAR2(2)    NOT NULL,            -- 상품구분
    ACC_NAME     VARCHAR2(20)   NOT NULL,            -- 상품명
    ACC_CID      VARCHAR2(14)      NOT NULL,         -- 고객번호
    ACC_BALANCE  NUMBER         DEFAULT 0,           -- 현재잔액 (기본값 0)
    ACC_DATE     DATE           NOT NULL,             -- 개설일
    FOREIGN KEY (ACC_CID) REFERENCES CUSTOMER (C_ID)
);

/*
CONSTRAINT PK_ACCOUNT PRIMARY KEY (ACC_NO),
CONSTRAINT CK_ACCOUNT_TYPE CHECK (ACC_TYPE IN ('S1','S2','S3','L1','L2'))
*/

CREATE TABLE TRANSACTION (
    TR_NO      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- 거래번호 (PK, 자동 증가)
    TR_ACC     VARCHAR2(11)   NOT NULL,             -- 계좌번호
    TR_TYPE    NUMBER(1)      NOT NULL,             -- 거래구분
    TR_AMOUNT  NUMBER         DEFAULT 0,            -- 거래금액
    TR_DATE    DATE           NOT NULL,              -- 거래날짜
    FOREIGN KEY (TR_ACC) REFERENCES ACCOUNT (ACC_NO)
);

DROP TABLE TRANSACTION;
DELETE FROM ACCOUNT;
SELECT * FROM CUSTOMER;
DELETE FROM Customer WHERE CID = 'C101';


-- 실습 3-3
INSERT INTO CUSTOMER VALUES ('730423-1000001', '김유신', 1, '010-1234-1001', '경기도수원시');
INSERT INTO CUSTOMER VALUES ('750210-1000002', '김춘추', 1, '010-1234-1002', '경기도광주시');
INSERT INTO CUSTOMER VALUES ('830513-2000003', '선덕여왕', 1, '010-1234-1003', '서울시마포구');
INSERT INTO CUSTOMER VALUES ('870830-1000004', '강감찬', 1, '010-1234-1004', '서울시영등포구');
INSERT INTO CUSTOMER VALUES ('910913-2000005', '신사임당', 1, '010-1234-1005', '강원도강릉시');
INSERT INTO CUSTOMER VALUES ('941127-1000006', '이순신', 1, '010-1234-1006', '부산시영도구');
INSERT INTO CUSTOMER VALUES ('220-83-52237', '(주)한국전산', 2, '03-1234-1045', '서울시강서구');
INSERT INTO CUSTOMER VALUES ('361-23-42687', '(주)정보산업', 2, '031-563-1253', '경기도광명시');
INSERT INTO CUSTOMER VALUES ('103-23-51094', '부산의원', 2, '051-518-1010', '부산시남구');


INSERT INTO ACCOUNT VALUES ('101-11-1001', 'S1', '자유저축예금', '730423-1000001', 420000, TO_DATE('2005-07-21 12:10:03'));
INSERT INTO ACCOUNT VALUES ('101-13-1002', 'S2', '정기적립예금', '830513-2000003', 1020000, TO_DATE('2011-05-13 13:20:12'));
INSERT INTO ACCOUNT VALUES ('101-11-1003', 'S1', '자유저축예금', '870830-1000004', 53000, TO_DATE('2007-03-17 21:54:06'));
INSERT INTO ACCOUNT VALUES ('101-21-1004', 'L1', '고객신용대출', '910913-2000005', 1200500, TO_DATE('2009-08-25 14:34:57'));
INSERT INTO ACCOUNT VALUES ('101-13-1005', 'S3', '주택청약예금', '941127-1000006', 720800, TO_DATE('2013-10-15 19:56:34'));
INSERT INTO ACCOUNT VALUES ('101-23-1006', 'L2', '예금담보대출', '730423-1000001', 250000, TO_DATE('2013-12-11 18:14:22'));
INSERT INTO ACCOUNT VALUES ('101-23-1007', 'L2', '주택담보대출', '750210-1000002', 2700000, TO_DATE('2020-09-23 09:19:13'));
INSERT INTO ACCOUNT VALUES ('101-11-2001', 'S1', '자유저축예금', '220-83-52237', 23000000, TO_DATE('2003-04-14 11:02:43'));
INSERT INTO ACCOUNT VALUES ('101-11-2002', 'S1', '자유저축예금', '361-23-42687', 4201000, TO_DATE('2008-12-30 12:32:59'));
INSERT INTO ACCOUNT VALUES ('101-11-2003', 'S1', '자유저축예금', '103-23-51094', 8325010, TO_DATE('2010-06-07 15:47:04'));

INSERT INTO TRANSACTION VALUES (1, '101-11-1001', 1, 50000, TO_DATE('2025-07-12 13:55:31'));
INSERT INTO TRANSACTION VALUES (2, '101-11-1003', 1, 120000, TO_DATE('2025-07-12 14:15:22'));
INSERT INTO TRANSACTION VALUES (3, '101-11-2001', 2, 300000, TO_DATE('2025-07-19 17:53:42'));
INSERT INTO TRANSACTION VALUES (4, '101-13-1002', 1, 1000000, TO_DATE('2025-07-20 07:25:08'));
INSERT INTO TRANSACTION VALUES (5, '101-11-1001', 0, 0, TO_DATE('2025-07-20 09:21:13'));
INSERT INTO TRANSACTION VALUES (6, '101-13-1005', 1, 200000, TO_DATE('2025-07-20 10:15:02'));
INSERT INTO TRANSACTION VALUES (7, '101-11-1001', 1, 450000, TO_DATE('2025-07-20 11:34:42'));
INSERT INTO TRANSACTION VALUES (8, '101-11-2002', 2, 32000, TO_DATE('2025-07-21 09:12:37'));
INSERT INTO TRANSACTION VALUES (9, '101-11-2003', 0, 0, TO_DATE('2025-07-21 16:02:31'));
INSERT INTO TRANSACTION VALUES (10, '101-11-1003', 2, 75000, TO_DATE('2025-07-21 17:41:11'));

-- 실습 3-4, 3-5, 3-6
SELECT * FROM CUSTOMER;
SELECT * FROM ACCOUNT;
SELECT * FROM TRANSACTION;

-- 실습 3-7
SELECT C_NAME, C_ID FROM CUSTOMER;

-- 실습 3-8
SELECT ACC_TYPE, ACC_NAME FROM ACCOUNT;

-- 실습 3-9
SELECT DISTINCT ACC_TYPE, ACC_NAME FROM ACCOUNT;

-- 실습 3-10
SELECT * FROM ACCOUNT 
    WHERE ACC_NAME = '자유저축예금' AND
    acc_balance >= 1000000;

-- 실습 3-11
SELECT * FROM CUSTOMER 
    WHERE C_ADDR LIKE '경기도%';

-- 실습 3-12
SELECT * FROM CUSTOMER WHERE C_TYPE = 2;

-- 실습 3-13
SELECT * FROM TRANSACTION WHERE TR_TYPE = 1;

-- 실습 3-14
SELECT * FROM TRANSACTION WHERE TR_TYPE = 2
    ORDER BY TR_AMOUNT DESC;

-- 실습 3-15
SELECT 
    SUM(TR_AMOUNT)AS 입금총합, AVG(TR_AMOUNT)AS 입금평균
FROM TRANSACTION WHERE TR_TYPE=1;

-- 실습 3-16
SELECT
    MAX(TR_AMOUNT) AS 큰_금액, MIN(TR_AMOUNT) AS 작은금액
FROM TRANSACTION WHERE TR_TYPE=2;

-- 실습 3_17
SELECT * FROM ACCOUNT 
    WHERE ACC_BALANCE >= 1000000
    AND ACC_NAME = '자유저축예금'
    ORDER BY ACC_BALANCE DESC;

-- 실습 3-18
SELECT * FROM ACCOUNT WHERE ACC_TYPE = 'S1'
    ORDER BY ACC_BALANCE DESC 
    FETCH FIRST 1 ROWS ONLY;
// 이렇게도 풀 수 있음    
SELECT * FROM ACCOUNT 
    WHERE ACC_BALANCE =
    (SELECT MAX(ACC_BALANCE) FROM ACCOUNT WHERE ACC_TYPE='S1');
    
-- 실습 3-19
SELECT * FROM TRANSACTION 
    WHERE TR_TYPE IN(1,2)
    ORDER BY TR_TYPE, TR_AMOUNT DESC; 

-- 실습 3-20
// CASE WHEN TR_TYPE = X THEN 1 END	조건이 맞을 때만 1 반환
SELECT 
    COUNT(CASE WHEN TR_TYPE = 0 THEN 1 END) AS "조회 건수",
    COUNT(CASE WHEN TR_TYPE = 1 THEN 1 END) AS "입금 건수",
    COUNT(CASE WHEN TR_TYPE = 2 THEN 1 END) AS "출금 건수"
FROM TRANSACTION;

-- 실습 3-21
SELECT 
    TR_TYPE,
    CASE
        WHEN TR_TYPE =0 THEN '조회'
        WHEN TR_TYPE =1 THEN '입금'
        WHEN TR_TYPE =2 THEN '출금'
    END AS "거래종류",
    TR_ACC, TR_AMOUNT
FROM TRANSACTION;

-- 실습 3-22
SELECT TR_TYPE, COUNT(TR_NO) FROM TRANSACTION
    GROUP BY 
    TR_TYPE
    ORDER BY 
    TR_TYPE;
  
-- 실습 3-23
SELECT TR_ACC, TR_TYPE, SUM(TR_AMOUNT)AS 합계
    FROM TRANSACTION
    WHERE TR_TYPE = 1  --입금 거래만 필터링 (tr_type = 1)
    GROUP BY TR_ACC, TR_TYPE --계좌번호별(그리고 타입별)로 묶음
    HAVING SUM(TR_AMOUNT) >= 100000 --합계가 10만 이상인 경우만 필터
    ORDER BY 합계 DESC;       -- 큰 금액부터 정렬

-- 실습 3-24
SELECT TR_ACC, COUNT(*) AS 거래건수,
    SUM(TR_AMOUNT) AS 총거래금액
    FROM TRANSACTION
    WHERE TR_TYPE IN (1,2)
    GROUP BY TR_ACC
    HAVING SUM(TR_AMOUNT) >= 100000
    ORDER BY 총거래금액 DESC
    OFFSET 1 ROW FETCH NEXT 2 ROWS ONLY; 
    -- 2번째부터 2개 행(2번째, 3번째)만 가져오기
    
-- 실습 3-25
SELECT ACC_NO, ACC_NAME, C_ID, C_NAME, ACC_BALANCE, ACC_DATE
    FROM ACCOUNT JOIN CUSTOMER 
        ON ACCOUNT.ACC_CID = CUSTOMER.C_ID ;

-- 실습 3-26
SELECT ACC_NO AS 계좌번호, ACC_NAME AS 계좌이름, 
    C_ID AS 주민번호_사업자번호, C_NAME AS 고객명, 
    ACC_BALANCE AS 현재잔액
    FROM ACCOUNT JOIN CUSTOMER 
        ON ACCOUNT.ACC_CID = CUSTOMER.C_ID
    WHERE ACC_BALANCE >= 1000000
    ORDER BY ACC_BALANCE DESC;

-- 실습 3-27
SELECT TR_NO, TR_ACC, ACC_CID, TR_TYPE, 
    TR_AMOUNT, TR_DATE
    FROM TRANSACTION JOIN ACCOUNT
    ON TRANSACTION.TR_ACC = ACCOUNT.ACC_NO;

-- 실습 3-28
SELECT A.ACC_NO, A.C_NAME, 
    SUM(CASE WHEN T.TR_TYPE = 1 THEN T.TR_AMOUNT ELSE 0 END) AS 총입금액,
    SUM(CASE WHEN t.TR_TYPE = 2 THEN t.TR_AMOUNT ELSE 0 END) AS 총출금액
FROM TRANSACTION t
    RIGHT JOIN ACCOUNT a ON t.TR_ACC = a.ACC_NO -- 외부조인임
    JOIN CUSTOMER c ON a.ACC_CID = c.C_ID
    WHERE c.C_TYPE = 1
    GROUP BY a.acc_no, c.C_NAME;

-- 실습 3-29
SELECT
    a.ACC_NO,
    a.ACC_CID,
    a.ACC_NAME,
    c.C_NAME,
    a.ACC_BALANCE + 
        SUM(CASE WHEN t.TR_TYPE = 1 THEN t.TR_AMOUNT ELSE 0 END) - 
        SUM(CASE WHEN t.TR_TYPE = 2 THEN t.TR_AMOUNT ELSE 0 END) AS 최종잔액
FROM ACCOUNT a
    LEFT JOIN TRANSACTION t ON a.ACC_NO = t.TR_ACC
    JOIN CUSTOMER c ON a.ACC_CID = c.C_ID 
WHERE C_TYPE = 1 
    GROUP BY a.ACC_NO, a.ACC_CID, a.ACC_NAME, a.ACC_BALANCE, c.C_NAME
    ORDER BY a.ACC_NO;

-- 실습 3-30
 SELECT c.C_NAME, a.ACC_NO, t.TOTAL_DEPOSIT, c.C_ADDR
 FROM ACCOUNT a JOIN CUSTOMER c ON a.ACC_CID = c.C_ID
    JOIN (SELECT TR_ACC,SUM(TR_AMOUNT) AS TOTAL_DEPOSIT
        FROM TRANSACTION WHERE TR_TYPE = 1
        GROUP BY TR_ACC) t ON a.ACC_NO = t.TR_ACC
    WHERE t.TOTAL_DEPOSIT = (
 SELECT MAX(SUM_AMOUNT)
 FROM ( SELECT TR_ACC, SUM(TR_AMOUNT) AS SUM_AMOUNT
        FROM TRANSACTION WHERE TR_TYPE = 1
        GROUP BY TR_ACC)
 );

SELECT 
    c.C_NAME, a.ACC_NO, t.TOTAL_DEPOSIT, c.C_ADDR
FROM ACCOUNT a
JOIN CUSTOMER c ON a.ACC_CID = c.C_ID
JOIN (
    SELECT TR_ACC, SUM(TR_AMOUNT) AS TOTAL_DEPOSIT
    FROM TRANSACTION 
    WHERE TR_TYPE = 1
    GROUP BY TR_ACC
) t ON a.ACC_NO = t.TR_ACC
ORDER BY t.TOTAL_DEPOSIT DESC
FETCH FIRST 1 ROW ONLY;

