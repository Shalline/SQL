/*
   날짜 : 2025/07/23
   이름 : 김수진
   내용 : SQL 연습문제4
*/

-- 회원 테이블
CREATE TABLE Member (
    member_id     NUMBER(4)      PRIMARY KEY,
    name          VARCHAR2(40)   NOT NULL,
    address       VARCHAR2(100),
    hp            CHAR(13)       UNIQUE,
    join_date     DATE           NOT NULL
);

-- 도서 테이블
CREATE TABLE Book (
    book_id       NUMBER(5)      PRIMARY KEY,
    title         VARCHAR2(50)   NOT NULL,
    author        VARCHAR2(40)   NOT NULL,
    publisher     VARCHAR2(40)   NOT NULL,
    available     CHAR(1),
    reg_date      DATE           NOT NULL
);

-- 대출 테이블
CREATE TABLE Loan (
    loan_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    member_id     NUMBER(4)      NOT NULL,
    book_id       NUMBER(5)      NOT NULL,
    loan_date     DATE,
    return_date   DATE,
    actual_date   DATE,
    CONSTRAINT fk_member FOREIGN KEY (member_id) REFERENCES Member(member_id),
    CONSTRAINT fk_book   FOREIGN KEY (book_id) REFERENCES Book(book_id)
);

DROP TABLE TRANSACTION;
DELETE FROM ACCOUNT;
SELECT * FROM BOOK;
DELETE FROM Customer WHERE CID = 'C101';

-- 실습 4-3
INSERT INTO Member VALUES (1001, '김유신', '서울특별시강남구역삼동', '010-1234-1001', TO_DATE('2024-01-10 09:15:00'));
INSERT INTO Member VALUES (1002, '김춘추', '대전광역시유성구장대동', '010-1234-1002', TO_DATE('2024-02-14 14:30:45'));
INSERT INTO Member VALUES (1003, '장보고', '대구광역시수성구반월동', '010-1234-1003', TO_DATE('2024-03-01 11:05:20'));
INSERT INTO Member VALUES (1004, '강감찬', '부산광역시금정구부곡동', '010-1234-1004', TO_DATE('2024-03-22 16:40:00'));
INSERT INTO Member VALUES (1005, '이순신', '광주광역시광산구우산동', '010-1234-1005', TO_DATE('2024-04-10 08:50:10'));

INSERT INTO Book VALUES (10001, '태백산맥', '조정래', '문학수첩', 'Y', TO_DATE('2014-01-10 09:15:00'));
INSERT INTO Book VALUES (10002, '데미안', '헤르만헤세', '민음사', 'N', TO_DATE('2014-02-14 14:30:45'));
INSERT INTO Book VALUES (10003, '토지', '박경리', '문학사상사', 'Y', TO_DATE('2014-03-01 11:05:20'));
INSERT INTO Book VALUES (10004, '명품자바프로그래밍', '제임스고슬링', '한빛출판사', 'Y', TO_DATE('2014-03-22 16:40:00'));
INSERT INTO Book VALUES (10005, '로미오와줄리엣', '세익스피어', '열린책들', 'N', TO_DATE('2014-04-10 08:50:10'));
INSERT INTO Book VALUES (10006, '삼국지', '나관중', '민음사', 'Y', TO_DATE('2014-04-05 09:12:02'));
INSERT INTO Book VALUES (10007, '칼의노래', '김훈', '문학동네', 'Y', TO_DATE('2014-06-10 12:53:17'));
INSERT INTO Book VALUES (10008, '데이터베이스', '래리엘리슨', '한빛출판사', 'N', TO_DATE('2014-02-03 10:13:09'));
INSERT INTO Book VALUES (10009, 'Linux운영체제', '리누스토발즈', '한빛출판사', 'Y', TO_DATE('2014-03-11 11:23:43'));
INSERT INTO Book VALUES (10010, '어린왕자', '생텍쥐베리', '열린책들', 'Y', TO_DATE('2014-01-03 15:27:21'));

INSERT INTO Loan VALUES (1, 1001, 10002, TO_DATE('2024-03-01 10:02:31'), TO_DATE('2024-03-15 10:02:31'), TO_DATE('2024-03-13 09:44:19'));
INSERT INTO Loan VALUES (2, 1002, 10004, TO_DATE('2024-03-05 15:10:02'), TO_DATE('2024-03-19 15:10:02'), TO_DATE('2024-03-12 17:12:30'));
INSERT INTO Loan VALUES (3, 1003, 10008, TO_DATE('2024-04-01 11:01:12'), TO_DATE('2024-04-15 11:01:12'), NULL);
INSERT INTO Loan VALUES (4, 1002, 10001, TO_DATE('2024-04-10 14:32:01'), TO_DATE('2024-04-24 14:32:01'), TO_DATE('2024-04-22 13:56:32'));
INSERT INTO Loan VALUES (5, 1005, 10004, TO_DATE('2024-04-15 16:24:21'), TO_DATE('2024-04-29 16:24:21'), NULL);
INSERT INTO Loan VALUES (6, 1004, 10006, TO_DATE('2024-01-01 09:12:09'), TO_DATE('2024-01-05 09:12:09'), TO_DATE('2024-01-04 09:21:27'));
INSERT INTO Loan VALUES (7, 1001, 10007, TO_DATE('2024-03-03 13:51:07'), TO_DATE('2024-03-17 13:51:07'), TO_DATE('2024-03-16 14:05:10'));
INSERT INTO Loan VALUES (8, 1003, 10009, TO_DATE('2024-06-01 11:15:43'), TO_DATE('2024-06-15 11:15:43'), NULL);
INSERT INTO Loan VALUES (9, 1004, 10004, TO_DATE('2024-06-02 12:30:52'), TO_DATE('2024-06-16 12:30:52'), NULL);
INSERT INTO Loan VALUES (10, 1002, 10008, TO_DATE('2024-06-05 10:06:17'), TO_DATE('2024-06-19 10:06:17'), NULL);

UPDATE Loan
    SET LOAN_DATE=TO_DATE('2024-05-01 09:12:09'), RETURN_DATE=TO_DATE('2024-05-15 09:12:09'),
    actual_date = TO_DATE('2024-05-14 09:21:27')
    WHERE loan_id = 6;
UPDATE Loan
    SET LOAN_DATE=TO_DATE('2024-05-03 13:51:07'), RETURN_DATE=TO_DATE('2024-05-17 13:51:07'),
    actual_date = TO_DATE('2024-05-16 14:05:10')
    WHERE loan_id = 7;

INSERT INTO Book VALUES (10008, '데이터베이스', '래리엘리슨', '한빛출판사', 'N', TO_DATE('2014-02-03 10:13:09'));
INSERT INTO Book VALUES (10010, '어린왕자', '생텍쥐베리', '열린책들', 'Y', TO_DATE('2014-01-03 15:27:21'));

UPDATE BOOK
    SET REG_DATE = TO_DATE('2014-05-23 10:13:09')
    WHERE BOOK_ID = 10008;
UPDATE BOOK
    SET REG_DATE = TO_DATE('2014-05-13 15:27:21')
    WHERE BOOK_ID = 10010;

-- 실습 4-4
SELECT * FROM MEMBER;

-- 실습 4-5
SELECT TITLE, AUTHOR FROM BOOK;

-- 실습 4-6
SELECT NAME, ADDRESS FROM MEMBER
    WHERE ADDRESS LIKE '부산%';

-- 실습 4-7
SELECT TITLE FROM BOOK
    WHERE AVAILABLE = 'Y';

-- 실습 4-8
SELECT * FROM BOOK
    WHERE BOOK_ID = '10005';

-- 실습 4-9
SELECT MEMBER_ID, NAME, HP FROM MEMBER
    WHERE MEMBER_ID = '1002';

-- 실습 4-10
SELECT TITLE FROM BOOK
    WHERE REG_DATE LIKE '2014-03%';

-- 실습 4-11
SELECT TITLE, AUTHOR, PUBLISHER FROM BOOK
    WHERE PUBLISHER ='민음사';

-- 실습 4-12
SELECT LOAN_ID, MEMBER_ID, BOOK_ID FROM LOAN
    WHERE ACTUAL_DATE IS NULL;

-- 실습 4-13
SELECT * FROM MEMBER
    WHERE NAME LIKE '김%';

-- 실습 4-14
SELECT name, address FROM Member
    WHERE address LIKE '대구광역시%' OR address LIKE '부산광역시%';
    
SELECT * FROM MEMBER WHERE SUBSTR(ADDRESS,1,2) IN ('대구','부산');

-- 실습 4-15
SELECT BOOK_ID, TITLE FROM BOOK
    WHERE BOOK_ID = '10003' OR BOOK_ID = '10006';

-- 실습 4-16
SELECT TITLE, AUTHOR FROM BOOK
    WHERE AUTHOR = '조정래' OR AUTHOR = '박경리' ;

-- 실습 4-17
SELECT NAME, JOIN_DATE FROM MEMBER
    WHERE JOIN_DATE < TO_DATE ('2024-04-01');

-- 실습 4-18
SELECT LOAN_ID, MEMBER_ID, BOOK_ID, LOAN_DATE FROM LOAN
    WHERE LOAN_DATE > TO_DATE('2024-04-30');

-- 실습 4-19
SELECT TITLE, AUTHOR, PUBLISHER FROM BOOK
    WHERE AVAILABLE = 'N';

-- 실습 4-20
SELECT * FROM BOOK 
    WHERE TITLE LIKE '%자바%';

-- 실습 4-21
SELECT NAME, HP FROM MEMBER
    WHERE HP != '010-1234-1003';

-- 실습 4-22
SELECT LOAN_ID, MEMBER_ID, BOOK_ID FROM LOAN
    WHERE  RETURN_DATE < '2024-03-20';

-- 실습 4-23
SELECT * FROM MEMBER
    ORDER BY NAME ASC;

-- 실습 4-24
SELECT TITLE, REG_DATE FROM BOOK
    ORDER BY REG_DATE DESC;

-- 실습 4-25
SELECT TITLE FROM BOOK
    ORDER BY TITLE ASC
    FETCH FIRST 3 ROWS ONLY;
    
-- 실습 4-26
SELECT * FROM MEMBER
    WHERE JOIN_DATE = (SELECT MAX(JOIN_DATE)FROM MEMBER);

// SELECT MAX(JOIN_DATE)FROM MEMBER 가장최근 가입일만 가져옴
SELECT * FROM Member
    ORDER BY join_date DESC
    FETCH FIRST 1 ROW ONLY;

SELECT * FROM 
(
    SELECT *
    FROM Member
    ORDER BY join_date DESC
)
WHERE ROWNUM = 1;

-- 실습 4-27
SELECT LOAN_ID, LOAN_DATE FROM LOAN
    ORDER BY LOAN_DATE ASC
    FETCH FIRST 2 ROWS ONLY;

-- 실습 4-28
SELECT COUNT(*) FROM MEMBER;

-- 실습 4-29
SELECT COUNT(*) FROM BOOK;

-- 실습 4-30
SELECT COUNT(*) FROM BOOK
    WHERE AVAILABLE = 'Y';

-- 실습 4-31
SELECT PUBLISHER, COUNT(*) AS 출판_도서수
    FROM BOOK
    GROUP BY PUBLISHER;

-- 실습 4-32
SELECT COUNT(*) FROM LOAN
    WHERE EXTRACT(YEAR FROM LOAN_DATE) = '2024';

-- 실습 4-33
SELECT M.MEMBER_ID, COUNT(*) AS 대출_도서수
    FROM MEMBER M
    JOIN LOAN L ON M.MEMBER_ID = L.MEMBER_ID
    GROUP BY M.MEMBER_ID;

-- 실습 4-34
SELECT B.BOOK_ID, COUNT(*) AS 대출횟수
    FROM BOOK B
    JOIN LOAN L ON B.BOOK_ID = L.BOOK_ID
    GROUP BY B.BOOK_ID;
    
-- 실습 4-35
SELECT M.MEMBER_ID, COUNT(*) AS 회원_대출건수
    FROM MEMBER M
    JOIN LOAN L ON  M.MEMBER_ID = L.MEMBER_ID
    GROUP BY M.MEMBER_ID
    HAVING COUNT(*) >=2;

-- 실습 4-36
SELECT B.BOOK_ID, COUNT(*) AS 도서_대출건수
    FROM BOOK B
    JOIN LOAN L ON B.BOOK_ID = L.BOOK_ID
    GROUP BY B.BOOK_ID
    HAVING COUNT(*) >=2;

-- 실습 4-37
SELECT L.MEMBER_ID, M.NAME, L.BOOK_ID, B.TITLE, L.LOAN_DATE FROM LOAN L
    JOIN MEMBER M ON L.MEMBER_ID = L.MEMBER_ID
    JOIN BOOK B ON L.BOOK_ID = B.BOOK_ID;

-- 실습 4-38
SELECT M.NAME, COUNT(*) AS 대출건수
    FROM MEMBER M
    JOIN LOAN L ON M.MEMBER_ID = L.MEMBER_ID
    GROUP BY M.NAME
    HAVING COUNT(*) >= 3;

-- 실습 4-39
SELECT L.LOAN_ID, M.NAME, B.TITLE, L.LOAN_DATE 
    FROM LOAN L
    JOIN MEMBER M ON L.MEMBER_ID = M.MEMBER_ID
    JOIN BOOK B ON L.BOOK_ID = B.BOOK_ID
    WHERE L.LOAN_DATE < TO_DATE('2024-05-01');
    -- ORDER BY L.LOAN_DATE;

-- 실습 4-40
SELECT B.TITLE FROM BOOK B
    JOIN LOAN L ON L.BOOK_ID=B.BOOK_ID
    JOIN MEMBER M ON L.MEMBER_ID = M.MEMBER_ID
    WHERE M.NAME = '김유신';
  
-- 실습 4-41
SELECT M.NAME FROM MEMBER M
    JOIN Loan L ON M.member_id = L.member_id
    JOIN Book B ON L.book_id = B.book_id
    WHERE B.TITLE = '태백산맥';

-- 실습 4-42
SELECT M.NAME, B.TITLE FROM BOOK B
    JOIN LOAN L ON B.BOOK_ID = L.BOOK_ID
    JOIN MEMBER M ON L.MEMBER_ID = M.MEMBER_ID
    WHERE M.NAME = '김춘추'
    ORDER BY TITLE ASC;

-- 실습 4-43
SELECT TITLE, NAME FROM MEMBER M
    JOIN LOAN L ON M.MEMBER_ID = L.MEMBER_ID
    JOIN BOOK B ON L.BOOK_ID = B.BOOK_ID
    WHERE LOAN_DATE LIKE '2024-04%';

-- 실습 4-44
SELECT NAME, TITLE FROM BOOK B
    JOIN LOAN L ON B.BOOK_ID = L.BOOK_ID
    JOIN MEMBER M ON L.MEMBER_ID = M.MEMBER_ID
    WHERE L.ACTUAL_DATE IS NULL;

// L.ACTUAL_DATE IS NULL 아직 반납하지 않은 대출

-- 실습 4-45
SELECT NAME, TITLE FROM BOOK B
    JOIN LOAN L ON B.BOOK_ID = L.BOOK_ID
    JOIN MEMBER M ON L.MEMBER_ID = M.MEMBER_ID
    WHERE AUTHOR ='조정래';

-- 실습 4-46. BOOK에는 있지만 LOAN에는 없는 BOOK_ID를 찾아야함
SELECT B.book_id, B.title FROM Book B
    LEFT JOIN Loan L ON B.book_id = L.book_id
    WHERE L.book_id IS NULL;

-- 실습 4-47
SELECT NAME, COUNT(*)AS 총_건수 FROM MEMBER M
    JOIN LOAN L ON M.MEMBER_ID = L.MEMBER_ID
    GROUP BY M.NAME
    ORDER BY COUNT(*) DESC;

-- 실습 4-48 어렵다. 다시 보자!
SELECT NAME FROM MEMBER 
    WHERE MEMBER_ID =(
    SELECT MEMBER_ID FROM LOAN
    GROUP BY MEMBER_ID
    ORDER BY COUNT(*) DESC
    FETCH FIRST 1 ROWS ONLY
    );

-- 실습 4-49
SELECT TITLE FROM BOOK
    WHERE PUBLISHER = (
    SELECT PUBLISHER FROM BOOK
    WHERE TITLE ='데이터베이스'
    ) AND TITLE <> '데이터베이스';

-- 실습 4-50
SELECT NAME FROM MEMBER
    WHERE MEMBER_ID IN (
    SELECT MEMBER_ID FROM LOAN 
    WHERE BOOK_ID = '10004'
    );




